[{"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/index.jsx":"1","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/App.jsx":"2","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/constants.js":"3","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/contracts/external_contracts.js":"4","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/index.js":"5","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/views/index.js":"6","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/helpers/index.js":"7","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/hooks/index.js":"8","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/helpers/Transactor.js":"9","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/hooks/useDebounce.js":"10","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/hooks/useContractConfig.js":"11","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Account.jsx":"12","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/views/Home.jsx":"13","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/helpers/loadAppContracts.js":"14","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Balance.jsx":"15","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Wallet.jsx":"16","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Address.jsx":"17","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/WalletImport.jsx":"18","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/EtherInput.jsx":"19","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/AddressInput.jsx":"20","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Blockie.jsx":"21","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/hooks/useStaticJsonRPC.js":"22","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/hooks/useLocalStorage.js":"23","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/helpers/Web3ModalSetup.js":"24","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/helpers/ipfs.js":"25","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/helpers/rpc.js":"26","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/views/Hints.jsx":"27","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/views/ExampleUI.jsx":"28","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/views/Subgraph.jsx":"29","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/views/TeaParty.js":"30","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/TokenSelect.jsx":"31","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/NetworkSwitch.jsx":"32","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/MultiAddressInput.jsx":"33","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/FaucetHint.jsx":"34","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/NetworkDisplay.jsx":"35","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/L2Bridge.jsx":"36","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/TokenBalance.jsx":"37","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/ThemeSwitch.jsx":"38","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Swap.jsx":"39","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Timeline.jsx":"40","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Ramp.jsx":"41","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Provider.jsx":"42","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Header.jsx":"43","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/GasGauge.jsx":"44","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Faucet.jsx":"45","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Events.jsx":"46","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/BytesStringInput.jsx":"47","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Contract/index.jsx":"48","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Contract/FunctionForm.jsx":"49","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Contract/DisplayVariable.jsx":"50","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Contract/utils.jsx":"51"},{"size":973,"mtime":1677949226644,"results":"52","hashOfConfig":"53"},{"size":12322,"mtime":1679519191200,"results":"54","hashOfConfig":"53"},{"size":6088,"mtime":1679518412398,"results":"55","hashOfConfig":"53"},{"size":13704,"mtime":1677949226640,"results":"56","hashOfConfig":"53"},{"size":1360,"mtime":1677949226640,"results":"57","hashOfConfig":"53"},{"size":238,"mtime":1677949226644,"results":"58","hashOfConfig":"53"},{"size":171,"mtime":1677949226644,"results":"59","hashOfConfig":"53"},{"size":223,"mtime":1677949226644,"results":"60","hashOfConfig":"53"},{"size":5310,"mtime":1677949226644,"results":"61","hashOfConfig":"53"},{"size":374,"mtime":1677949226644,"results":"62","hashOfConfig":"53"},{"size":417,"mtime":1677949226644,"results":"63","hashOfConfig":"53"},{"size":2869,"mtime":1677949226640,"results":"64","hashOfConfig":"53"},{"size":4285,"mtime":1677949226644,"results":"65","hashOfConfig":"53"},{"size":402,"mtime":1677949226644,"results":"66","hashOfConfig":"53"},{"size":1874,"mtime":1677949226640,"results":"67","hashOfConfig":"53"},{"size":10633,"mtime":1677949226640,"results":"68","hashOfConfig":"53"},{"size":3341,"mtime":1677949226640,"results":"69","hashOfConfig":"53"},{"size":4310,"mtime":1677949226640,"results":"70","hashOfConfig":"53"},{"size":2727,"mtime":1677949226640,"results":"71","hashOfConfig":"53"},{"size":4192,"mtime":1677949226640,"results":"72","hashOfConfig":"53"},{"size":414,"mtime":1677949226640,"results":"73","hashOfConfig":"53"},{"size":1013,"mtime":1677949226644,"results":"74","hashOfConfig":"53"},{"size":2138,"mtime":1677949226644,"results":"75","hashOfConfig":"53"},{"size":3040,"mtime":1677949226644,"results":"76","hashOfConfig":"53"},{"size":533,"mtime":1677949226644,"results":"77","hashOfConfig":"53"},{"size":303,"mtime":1677949226644,"results":"78","hashOfConfig":"53"},{"size":9082,"mtime":1677949226644,"results":"79","hashOfConfig":"53"},{"size":2158,"mtime":1679519189656,"results":"80","hashOfConfig":"53"},{"size":5911,"mtime":1677949226644,"results":"81","hashOfConfig":"53"},{"size":79940,"mtime":1679781004942,"results":"82","hashOfConfig":"53"},{"size":4631,"mtime":1677949226640,"results":"83","hashOfConfig":"53"},{"size":775,"mtime":1677949226640,"results":"84","hashOfConfig":"53"},{"size":4282,"mtime":1677949226640,"results":"85","hashOfConfig":"53"},{"size":1462,"mtime":1677949226640,"results":"86","hashOfConfig":"53"},{"size":3613,"mtime":1677949226640,"results":"87","hashOfConfig":"53"},{"size":13151,"mtime":1677949226640,"results":"88","hashOfConfig":"53"},{"size":1230,"mtime":1677949226640,"results":"89","hashOfConfig":"53"},{"size":740,"mtime":1677949226640,"results":"90","hashOfConfig":"53"},{"size":23511,"mtime":1677949226640,"results":"91","hashOfConfig":"53"},{"size":4146,"mtime":1677949226640,"results":"92","hashOfConfig":"53"},{"size":3921,"mtime":1677949226640,"results":"93","hashOfConfig":"53"},{"size":2420,"mtime":1677949226640,"results":"94","hashOfConfig":"53"},{"size":530,"mtime":1677949226640,"results":"95","hashOfConfig":"53"},{"size":758,"mtime":1677949226640,"results":"96","hashOfConfig":"53"},{"size":2919,"mtime":1677949226640,"results":"97","hashOfConfig":"53"},{"size":1179,"mtime":1677949226640,"results":"98","hashOfConfig":"53"},{"size":2895,"mtime":1677949226640,"results":"99","hashOfConfig":"53"},{"size":4197,"mtime":1677949226640,"results":"100","hashOfConfig":"53"},{"size":8220,"mtime":1677949226640,"results":"101","hashOfConfig":"53"},{"size":1268,"mtime":1677949226640,"results":"102","hashOfConfig":"53"},{"size":1200,"mtime":1677949226640,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zep85s",{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":5,"source":"166"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"183"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"194"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/index.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/App.jsx",["211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226"],"import { Button, Col, Menu, Row } from \"antd\";\n\nimport \"antd/dist/antd.css\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useGasPrice,\n  // useOnBlock,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Link, Route, Switch, useLocation } from \"react-router-dom\";\nimport \"./App.css\";\nimport {\n  Account,\n  Contract,\n  Faucet,\n  GasGauge,\n  Header,\n  Ramp,\n  ThemeSwitch,\n  NetworkDisplay,\n  FaucetHint,\n  NetworkSwitch,\n} from \"./components\";\nimport { NETWORKS, ALCHEMY_KEY } from \"./constants\";\nimport externalContracts from \"./contracts/external_contracts\";\n// contracts\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\nimport { getRPCPollTime, Transactor, Web3ModalSetup } from \"./helpers\";\nimport { Home, ExampleUI, Hints, Subgraph, TeaParty } from \"./views\";\nimport { useStaticJsonRPC } from \"./hooks\";\n\nconst { ethers } = require(\"ethers\");\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/scaffold-eth/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Alchemy.com & Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst initialNetwork = NETWORKS.localhost; // <------- select your target frontend network (localhost, goerli, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\nconst USE_BURNER_WALLET = true; // toggle burner wallet feature\nconst USE_NETWORK_SELECTOR = false;\n\nconst web3Modal = Web3ModalSetup();\n\n// 🛰 providers\nconst providers = [\n  \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\n  `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n  \"https://rpc.scaffoldeth.io:48544\",\n];\n\nfunction App(props) {\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\n  // reference './constants.js' for other networks\n  const networkOptions = [initialNetwork.name, \"partychain\", \"goerli\"];\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[1]);\n  const location = useLocation();\n\n  const targetNetwork = NETWORKS[selectedNetwork];\n\n  // 🔭 block explorer URL\n  const blockExplorer = targetNetwork.blockExplorer;\n\n  // load all your providers\n  const localProvider = useStaticJsonRPC([\n    process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\n  ]);\n\n  const mainnetProvider = useStaticJsonRPC(providers, localProvider);\n\n  // Sensible pollTimes depending on the provider you are using\n  const localProviderPollingTime = getRPCPollTime(localProvider);\n  const mainnetProviderPollingTime = getRPCPollTime(mainnetProvider);\n\n  if (DEBUG) console.log(`Using ${selectedNetwork} network`);\n\n  // 🛰 providers\n  if (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider, mainnetProviderPollingTime);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\", localProviderPollingTime);\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\n  const userSigner = userProviderAndSigner.signer;\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address, localProviderPollingTime);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address, mainnetProviderPollingTime);\n\n  // const contractConfig = useContractConfig();\n\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider, contractConfig);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\n\n  // If you want to call a function on a new block\n  // useOnBlock(mainnetProvider, () => {\n  //   console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  // });\n\n  // Then read your DAI balance like:\n  const myMainnetDAIBalance = useContractReader(\n    mainnetContracts,\n    \"DAI\",\n    \"balanceOf\",\n    [\"0x34aA3F359A9D614239015126635CE7732c18fDF3\"],\n    mainnetProviderPollingTime,\n  );\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\", addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\n      console.log(\"🔐 writeContracts\", writeContracts);\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n    localChainId,\n    myMainnetDAIBalance,\n  ]);\n\n  const loadWeb3Modal = useCallback(async () => {\n    //const provider = await web3Modal.connect();\n    const provider = await web3Modal.requestProvider();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n    // eslint-disable-next-line\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n    //automatically connect if it is a safe app\n    const checkSafeApp = async () => {\n      if (await web3Modal.isSafeApp()) {\n        loadWeb3Modal();\n      }\n    };\n    checkSafeApp();\n  }, [loadWeb3Modal]);\n\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  return (\n    <div\n    // style={{\n    //   width: 'auto',\n    //   margin: 'auto',\n    //   marginTop: '2rem',\n    //   marginBottom: '2rem',\n    //   padding: '2rem',\n    //   border: 'dark',\n    //   backgroundColor: \"#3EB489\",\n    //   background: \"#3EB489\",\n    //   color: \"#023020\",\n    //   fontWeight: \"bold\",\n    //   minHeight: \"100vh\",\n    //   fontFamily: \"sans-serif\",\n    // }}\n    >\n      {/* ✏️ Edit the header and change the title to your project name */}\n      <Header>\n        <div>\n          <Account\n            useBurner={USE_BURNER_WALLET}\n            address={address}\n            localProvider={localProvider}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            price={price}\n            web3Modal={web3Modal}\n            loadWeb3Modal={loadWeb3Modal}\n            logoutOfWeb3Modal={logoutOfWeb3Modal}\n            blockExplorer={blockExplorer}\n          />\n        </div>\n      </Header>\n      <Switch>\n        <Route exact path=\"/\">\n          {/* pass in any web3 props to this Home component. For example, yourLocalBalance */}\n          <TeaParty\n            address={address}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            localProvider={localProvider}\n            yourLocalBalance={yourLocalBalance}\n            price={price}\n            tx={tx}\n            writeContracts={writeContracts}\n            readContracts={readContracts}\n          />\n          {/* <ExampleUI\n            address={address}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            localProvider={localProvider}\n            yourLocalBalance={yourLocalBalance}\n            price={price}\n            tx={tx}\n            writeContracts={writeContracts}\n            readContracts={readContracts}\n          /> */}\n        </Route>\n        <Route exact path=\"/debug\">\n          {/*\n                🎛 this scaffolding is full of commonly used components\n                this <Contract/> component will automatically parse your ABI\n                and give you a form to interact with it locally\n            */}\n          <Contract\n            name=\"TeaParty\"\n            price={price}\n            signer={userSigner}\n            provider={localProvider}\n            address={address}\n            blockExplorer={blockExplorer}\n            contractConfig={contractConfig}\n          />\n        </Route>\n      </Switch>\n\n      <ThemeSwitch />\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={24}>\n            {\n              /*  if the local provider has a signer, let's show the faucet:  */\n              faucetAvailable ? (\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\n              ) : (\n                \"\"\n              )\n            }\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/constants.js",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/contracts/external_contracts.js",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/index.js",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/views/index.js",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/helpers/index.js",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/hooks/index.js",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/helpers/Transactor.js",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/hooks/useDebounce.js",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/hooks/useContractConfig.js",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Account.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/views/Home.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/helpers/loadAppContracts.js",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Balance.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Wallet.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Address.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/WalletImport.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/EtherInput.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/AddressInput.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Blockie.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/hooks/useStaticJsonRPC.js",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/hooks/useLocalStorage.js",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/helpers/Web3ModalSetup.js",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/helpers/ipfs.js",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/helpers/rpc.js",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/views/Hints.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/views/ExampleUI.jsx",["227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242"],"import { Button, Card, DatePicker, Divider, Input, Progress, Slider, Spin, Switch } from \"antd\";\nimport React, { useState } from \"react\";\nimport { utils } from \"ethers\";\nimport { SyncOutlined } from \"@ant-design/icons\";\nimport { TeaParty } from \"./TeaParty\";\nimport Web3 from \"web3\";\n\nimport { Address, Balance, Events } from \"../components\";\n\nexport default function ExampleUI({\n  purpose,\n  address,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n}) {\n  const [response, setResponse] = useState(\"\");\n\n  return (\n    <div\n      style={{\n        width: \"auto\",\n        margin: \"auto\",\n        marginTop: \"2rem\",\n        marginBottom: \"2rem\",\n        padding: \"2rem\",\n        border: \"dark\",\n        backgroundColor: \"#3EB489\",\n        color: \"#023020\",\n        fontWeight: \"bold\",\n      }}\n    >\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64 }}>\n        <Button\n          onClick={async () => {\n            const result = tx(\n              writeContracts.TeaParty.createTransaction({\n                value: Web3.utils.toWei(\".1\", \"ether\"),\n              }),\n              update => {\n                console.log(\"📡 Transaction Update:\", update);\n                if (update && (update.status === \"confirmed\" || update.status === 1)) {\n                  console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n                  console.log(update.data);\n                  alert(Web3.utils.hexToNumber(update.data));\n                  console.log(\n                    \" ⛽️ \" +\n                      update.gasUsed +\n                      \"/\" +\n                      (update.gasLimit || update.gas) +\n                      \" @ \" +\n                      parseFloat(update.gasPrice) / 1000000000 +\n                      \" gwei\",\n                  );\n                }\n              },\n            );\n            console.log(\"awaiting metamask/web3 confirm result...\", result);\n\n            // convert from hex to uint\n          }}\n        >\n          Purchase a TeaParty Transaction\n        </Button>\n      </div>\n    </div>\n  );\n}\n","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/views/Subgraph.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/views/TeaParty.js",["243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273"],"import axios from \"axios\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { Button, Card, Col, Container, Form, Row, Dropdown, Toast, ToastContainer } from \"react-bootstrap\";\nimport web3 from \"web3\";\nimport gramsLogo from \"./logo/tp.jpeg\";\nimport octLogo from \"./logo/octa.png\";\nimport kasLogo from \"./logo/kaspa.png\";\nimport celoLogo from \"./logo/celo.png\";\nimport ethLogo from \"./logo/eth.png\";\nimport btcLogo from \"./logo/btc.png\";\nimport polygonLogo from \"./logo/matic.png\";\nimport rxdLogo from \"./logo/rxd.png\";\nimport solLogo from \"./logo/sol.png\";\nimport teaPartyLogo from \"./logo/teaparty.png\";\nimport altcoinchainLogo from \"./logo/acc.png\";\nimport usdtLogo from \"./logo/usdt.svg\";\nimport burgerLogo from \"./logo/burgler.png\";\nimport floraLogo from \"./logo/flora.png\";\nimport cantoLogo from \"./logo/canto.png\";\nimport confluxLogo from \"./logo/cfx.png\";\nimport ltcLogo from \"./logo/ltc.png\";\nimport etcLogo from \"./logo/etc.png\";\nimport ethoLogo from \"./logo/etho.jpg\";\nimport miningGameLogo from \"./logo/watt.png\";\n\nexport default function TeaParty({\n  address,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  tx,\n  readContracts,\n  writeContracts,\n}) {\n  // if address is not set, then we are not connected to the wallet\n  // set a default address so that we can still interact with the contract\n  if (!address) {\n    address = \"0x0000000000000000000000000000000000000000\";\n  }\n\n  const [tradeAsset, setTradeAsset] = useState(\"grams\");\n  const [amount, setAmount] = useState(\"1.2\");\n  const [nftID, setNftID] = useState(1);\n  const [currency, setCurrency] = useState(\"polygon\");\n  const [price, setPrice] = useState(\"1.5\");\n  const [txid, setTxid] = useState(\"\");\n  const [myNKNAddress, setMyNKNAddress] = useState(\"\");\n  const [sellerShippingAddress, setSellerShippingAddress] = useState(\"0x5bbfa5724260Cb175cB39b24802A04c3bfe72eb3\");\n  const [sellersPaymentTransactionID, setSellersPaymentTransactionID] = useState(\"\");\n  const [buyersPaymentTransactionID, setBuyersPaymentTransactionID] = useState(\"0x1232114\");\n  const [buyerShippingAddress, setBuyerShippingAddress] = useState(\"0x5bbfa5724260Cb175cB39b24802A04c3bfe72eb3\");\n  const [buyersRefundAddress, setBuyersRefundAddress] = useState(\"0x5bbfa5724260Cb175cB39b24802A04c3bfe72eb3\");\n  const [sellersRefundAddress, setSellersRefundAddress] = useState(\"0x5bbfa5724260Cb175cB39b24802A04c3bfe72eb3\");\n  const [privateSell, setPrivateSell] = useState(false);\n  const [userCurrentPendingPayOrders, setuserCurrentPendingPayOrders] = useState([]);\n  const [pendingPayNumberAmmount, setPendingPayNumberAmmount] = useState(0);\n  const [userPrivateKeys, setUserPrivateKeys] = useState([]);\n  const [showPrivateBuy, setShowPrivateBuy] = useState(false);\n  const [tradeInfo, setTradeInfo] = useState(false);\n  const [orderId, setOrderId] = useState(\"\");\n\n  const [currentOpenOrders, setCurrentOpenOrders] = useState();\n  const [sellOrderResponse, setSellOrderResponse] = useState(\"\");\n  const [buyOrderResponse, setBuyOrderResponse] = useState(\"\");\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [showPrivateKeys, setShowPrivateKeys] = useState(false);\n  const [showBuyOrder, setShowBuyOrder] = useState(false);\n  const [showBrowseOrders, setShowBrowseOrders] = useState(false);\n  const [showPendingPayOrders, setshowPendingPayOrders] = useState(false);\n  const [showHomePage, setShowHomePage] = useState(true);\n  const [showNav, setShowNav] = useState(true);\n  const [sortBy, setSortBy] = useState(\"grams\");\n\n  const [waitingToReconnect, setWaitingToReconnect] = useState(null);\n  const clientRef = useRef(null);\n\n  const [events, setEvents] = useState([]);\n\n  const URL = \"ws://localhost:8081/ws\";\n\n  // take in an asset name and return the associated logo\n  const returnLogo = asset => {\n    switch (asset) {\n      case \"grams\":\n        return gramsLogo;\n      case \"kaspa\":\n        return kasLogo;\n      case \"celo\":\n        return celoLogo;\n      case \"ethereum\":\n        return ethLogo;\n      case \"bitcoin\":\n        return btcLogo;\n      case \"polygon\":\n        return polygonLogo;\n      case \"radiant\":\n        return rxdLogo;\n      case \"solana\":\n        return solLogo;\n      case \"octa\":\n        return octLogo;\n      case \"bscUSDT\":\n        return usdtLogo;\n      case \"altcoinchain\":\n        return altcoinchainLogo;\n      case \"burger\":\n        return burgerLogo;\n      case \"flora\":\n        return floraLogo;\n      case \"canto\":\n        return cantoLogo;\n      case \"ethereumclassic\":\n        return etcLogo;\n      case \"confluxEspace\":\n        return confluxLogo;\n      case \"litecoin\":\n        return ltcLogo;\n      case \"etho\":\n        return ethoLogo;\n      case \"miningGame\":\n        return miningGameLogo;\n      default:\n        return teaPartyLogo;\n    }\n  };\n\n  const purchaseTransaction = async () => {\n    const result = tx(\n      writeContracts.TeaParty.createTransaction({\n        value: web3.utils.toWei(\".1\", \"ether\"),\n      }),\n      update => {\n        console.log(\"📡 Transaction Update:\", update);\n        if (update && (update.status === \"confirmed\" || update.status === 1)) {\n          console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n          console.log(update.data);\n          alert(\"Transaction Confirmed! You may now place a trade order.\");\n          console.log(\n            \" ⛽️ \" +\n              update.gasUsed +\n              \"/\" +\n              (update.gasLimit || update.gas) +\n              \" @ \" +\n              parseFloat(update.gasPrice) / 1000000000 +\n              \" gwei\",\n          );\n        }\n      },\n    );\n    console.log(\"awaiting metamask/web3 confirm result...\", result);\n  };\n\n  useEffect(() => {\n    getNKNAddress();\n    if (waitingToReconnect) {\n      return;\n    }\n\n    listOrders();\n    if (userPrivateKeys.length == 0) {\n      getPKs();\n    }\n\n    // fetchOpenOrderByNKN();\n    // Only set up the websocket once\n    if (!clientRef.current) {\n      const client = new WebSocket(URL);\n      clientRef.current = client;\n      window.client = client;\n      client.onerror = e => console.error(e);\n      client.onopen = () => {\n        setIsOpen(true);\n        console.log(\"ws opened\");\n      };\n\n      client.onclose = () => {\n        if (clientRef.current) {\n          console.log(\"ws closed by server\");\n        } else {\n          console.log(\"ws closed by app component unmount\");\n          return;\n        }\n\n        if (waitingToReconnect) {\n          return;\n        }\n\n        setIsOpen(false);\n        console.log(\"ws closed\");\n\n        setWaitingToReconnect(true);\n        setTimeout(() => setWaitingToReconnect(null), 5000);\n      };\n\n      client.onmessage = function (e) {\n        console.log(\"message received: \", e);\n        const message = JSON.parse(e.data);\n        // if the message contains an ammout property then add it to the setuserCurrentPendingPayOrders\n        if (message.amount) {\n          setuserCurrentPendingPayOrders(userCurrentPendingPayOrders => [...userCurrentPendingPayOrders, message]);\n          setPendingPayNumberAmmount(pendingPayNumberAmmount + 1);\n        }\n\n        // if the message contains a privateKey property then add it to the setUserPrivateKeys\n        if (message.privateKey) {\n          setUserPrivateKeys(userPrivateKeys => [...userPrivateKeys, message]);\n        }\n\n        // if the message contains an error property then alert the user\n        if (message.error) {\n          alert(message.error);\n          console.log(message.error);\n        }\n\n        setEvents(messages => [...messages, e.data]);\n      };\n\n      return () => {\n        console.log(\"Cleanup\");\n        clientRef.current = null;\n        client.close();\n      };\n    }\n  }, [waitingToReconnect]);\n\n  // getPKs is called to fetch the locally stored private keys from the local enviorment\n  const getPKs = async () => {\n    axios\n      .get(\"/getPrivateKeys\")\n      .then(response => {\n        console.log(response.data);\n        setUserPrivateKeys(response.data);\n        return response.data;\n      })\n      .catch(error => {\n        alert(\"Error Fetching Private Keys: \" + error);\n        console.log(error);\n      });\n  };\n\n  // deletePK is called to delete a private key from the local enviorment\n  const deletePK = async address => {\n    axios\n      .post(\"/deletePK\", {\n        address: address,\n      })\n      .then(response => {\n        console.log(response.data);\n        if (response.status == 200) {\n          alert(\"Private Key Deleted\");\n          getPKs();\n          return;\n        }\n      })\n      .catch(error => {\n        console.log(error);\n        alert(\"Error Deleting Private Key: \" + error);\n      });\n  };\n\n  const assistedSell = async () => {\n    const amt = parseInt(web3.utils.toWei(amount, \"ether\"));\n    const prc = parseInt(web3.utils.toWei(price, \"ether\"));\n\n    axios\n      .post(\"/assistedsell\", {\n        currency: currency,\n        amount: amt,\n        tradeAsset: tradeAsset,\n        price: prc,\n        onChain: true,\n        assisted: true,\n        sellerShippingAddress: sellerShippingAddress,\n        refundAddress: sellersRefundAddress,\n      })\n      .then(response => {\n        // stringify the response\n        const stringifiedResponse = JSON.stringify(response.data);\n        alert(\"Assisted Sell Transaction Sent. Please fund this escrow account:\" + stringifiedResponse);\n      })\n      .catch(error => {\n        console.log(error);\n        alert(\"Error Sending Assisted Sell Transaction: \" + error);\n      });\n  };\n\n  // /fetchopenorderbynkn\n  // const fetchOpenOrderByNKN = async () => {\n  //   if (!myNKNAddress) {\n  //     await getNKNAddress();\n  //   }\n\n  //   axios.post('/fetchopenorderbynkn', {\n  //     nknAddress: myNKNAddress\n  //   })\n  //     .then((response) => {miningGame\n\n  //       console.log(response.data);\n  //       setuserCurrentPendingPayOrders(response.data);\n  //     })\n  //     .catch((error) => {\n  //       console.log(error);\n  //     }\n  //     );\n  // }\n\n  // /listorders is called to fetch all the open orders from Party\n  const listOrders = async () => {\n    axios\n      .get(\"/list\")\n      .then(response => {\n        if (response.data) {\n          setCurrentOpenOrders(response.data);\n        }\n      })\n      .catch(error => {\n        console.log(error);\n        alert(\"Error Fetching Open Orders: \" + error);\n      });\n  };\n\n  // getNKNAddress is called to fetch the NKN address from tea's backend\n  const getNKNAddress = async () => {\n    axios\n      .get(\"/getNKNAddress\")\n      .then(response => {\n        console.log(response.data);\n        setMyNKNAddress(response.data);\n        return response.data;\n      })\n      .catch(error => {\n        console.log(error);\n        alert(\"Error Fetching NKN Address: \" + error);\n      });\n  };\n\n  // /sell is called to create a new sell order\n  const sell = async () => {\n    // convert the amount and price into wei\n    const amt = parseInt(web3.utils.toWei(amount, \"ether\"));\n    const prc = parseInt(web3.utils.toWei(price, \"ether\"));\n    // convert nftID to int\n    var nftIDint = parseInt(nftID);\n    if(nftIDint == NaN) {\n      nftIDint = 0;\n    }\n    axios\n      .post(\"/sell\", {\n        tradeAsset: tradeAsset,\n        amount: amt,\n        currency: currency,\n        price: prc,\n        locked: false,\n        sellerShippingAddress: sellerShippingAddress,\n        sellerNKNAddress: myNKNAddress,\n        paymentTransactionID: address,\n        refundAddress: sellersRefundAddress,\n        private: privateSell,\n        nftID: nftIDint,\n      })\n      .then(response => {\n        console.log(response.data);\n        // base64 decode the response]\n        alert(\"Sell Order Created\");\n        setSellOrderResponse(response.data);\n        listOrders();\n      })\n      .catch(error => {\n        console.log(error);\n        alert(\"Error Creating Sell Order.. Dont forget to pay your transaction fees: \" + error);\n      });\n  };\n\n  // /buy\n  const buy = async id => {\n    console.log(\"buying: \" + id);\n    if (myNKNAddress === \"\") {\n      await getNKNAddress();\n    }\n\n    if (id === \"\") {\n      alert(\"Please select an order to buy\");\n      return;\n    }\n\n    // remove the order from the current open orders\n    const newCurrentOpenOrders = currentOpenOrders.filter(order => order.txid !== id);\n    setCurrentOpenOrders(newCurrentOpenOrders);\n\n    axios\n      .post(\"/buy\", {\n        txid: id,\n        buyerNKNAddress: myNKNAddress,\n        buyerShippingAddress: buyerShippingAddress,\n        paymentTransactionID: address,\n        refundAddress: buyersRefundAddress,\n        tradeAsset: tradeAsset,\n      })\n      .then(response => {\n        // TODO:: display user facing error/success message\n        console.log(response.data);\n        alert(response.data);\n      })\n      .catch(error => {\n        console.log(error);\n        alert(\"Error Buying Order.. Dont forget to pay your transaction fees: \" + error);\n      });\n  };\n\n  // /privatebuy\n  const privatebuy = async () => {\n    console.log(\"buying: \" + orderId);\n    if (myNKNAddress === \"\") {\n      await getNKNAddress();\n    }\n\n    if (orderId === \"\") {\n      alert(\"Please select an order to buy\");\n      return;\n    }\n\n    // remove the order from the current open orders\n    const newCurrentOpenOrders = currentOpenOrders.filter(order => order.txid !== orderId);\n    setCurrentOpenOrders(newCurrentOpenOrders);\n\n    axios\n      .post(\"/buy\", {\n        txid: orderId,\n        buyerNKNAddress: myNKNAddress,\n        buyerShippingAddress: buyerShippingAddress,\n        paymentTransactionID: address,\n        refundAddress: buyersRefundAddress,\n        tradeAsset: tradeAsset,\n      })\n      .then(response => {\n        // TODO:: display user facing error/success message\n        console.log(response.data);\n        alert(response.data);\n      })\n      .catch(error => {\n        console.log(error);\n        alert(\"Error Buying Order.. Dont forget to pay your transaction fees: \" + error);\n      });\n  };\n\n  // show is called to select a block for the user to view\n  const show = blockName => {\n    switch (blockName) {\n      case \"browse\":\n        setShowBrowseOrders(true);\n        setshowPendingPayOrders(false);\n        setShowBuyOrder(false);\n        setShowPrivateKeys(false);\n        setShowHomePage(false);\n        setShowPrivateBuy(false);\n        return;\n      case \"pk\":\n        setShowBrowseOrders(false);\n        setshowPendingPayOrders(false);\n        setShowBuyOrder(false);\n        setShowPrivateKeys(true);\n        setShowHomePage(false);\n        setShowPrivateBuy(false);\n        return;\n      case \"sell\":\n        setShowBrowseOrders(false);\n        setshowPendingPayOrders(false);\n        setShowBuyOrder(true);\n        setShowPrivateKeys(false);\n        setShowHomePage(false);\n        setShowPrivateBuy(false);\n        return;\n      case \"payorder\":\n        setShowBrowseOrders(false);\n        setshowPendingPayOrders(true);\n        setShowBuyOrder(false);\n        setShowPrivateKeys(false);\n        setShowHomePage(false);\n        setShowPrivateBuy(false);\n        return;\n      case \"home\":\n        setShowBrowseOrders(false);\n        setshowPendingPayOrders(false);\n        setShowBuyOrder(false);\n        setShowPrivateKeys(false);\n        setShowHomePage(true);\n        return;\n      case \"private\":\n        setShowPrivateBuy(true);\n        setShowBrowseOrders(true);\n        setshowPendingPayOrders(false);\n        setShowBuyOrder(false);\n        setShowHomePage(false);\n      case \"nav\":\n        setShowNav(!showNav);\n    }\n  };\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        backgroundColor: \"#282c34\",\n        paddingTop: \"2rem\",\n      }}\n    >\n      <h1>\n        <span\n          style={{\n            color: \"#3EB489\",\n          }}\n        >\n          <img src={returnLogo(\"any\")} alt=\"Tea Party Logo\" width=\"100\" height=\"100\" />\n        </span>\n      </h1>\n      <Card\n        style={{\n          width: \"auto\",\n          margin: \"auto\",\n          marginTop: \"2rem\",\n          marginBottom: \"2rem\",\n          padding: \"2rem\",\n          border: \"dark\",\n          backgroundColor: \"#3EB489\",\n          color: \"#023020\",\n          fontWeight: \"bold\",\n          textAlign: \"center\",\n        }}\n      >\n        {/* <img src={returnLogo(\"burger\")} style={{ background: \"#023020\"}} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" onClick={() => show(\"nav\")} /> \n        {showNav ?  */}\n        <div>\n          <Button\n            style={{\n              backgroundColor: \"#023020\",\n              color: \"#3EB489\",\n              fontWeight: \"bold\",\n              width: 200,\n              alignSelf: \"center\",\n            }}\n            variant=\"secondary\"\n            onClick={() => purchaseTransaction()}\n          >\n            {\" \"}\n            Pay Transaction Fee\n          </Button>\n          {\"       \"}\n          <Button\n            style={{\n              backgroundColor: \"#023020\",\n              color: \"#3EB489\",\n              fontWeight: \"bold\",\n              width: 200,\n              alignSelf: \"center\",\n            }}\n            variant=\"secondary\"\n            onClick={() => show(\"browse\") && listOrders()}\n          >\n            Browse\n          </Button>\n          {\"       \"}\n          <Button\n            style={{\n              backgroundColor: \"#023020\",\n              color: \"#3EB489\",\n              fontWeight: \"bold\",\n              width: 200,\n              alignSelf: \"center\",\n            }}\n            variant=\"secondary\"\n            onClick={() => show(\"sell\")}\n          >\n            New Trade\n          </Button>\n          {\"       \"}\n          <Button\n            style={{\n              backgroundColor: \"#023020\",\n              color: \"#3EB489\",\n              fontWeight: \"bold\",\n              width: 200,\n              alignSelf: \"center\",\n            }}\n            variant=\"secondary\"\n            onClick={() => {\n              show(\"payorder\");\n            }}\n          >\n            Pending Pay Orders <span style={{ color: \"lightgreen\" }}>{pendingPayNumberAmmount}</span>\n          </Button>\n          {\"      \"}\n          <Button\n            style={{\n              backgroundColor: \"#023020\",\n              color: \"#3EB489\",\n              fontWeight: \"bold\",\n              width: 200,\n              alignSelf: \"center\",\n            }}\n            variant=\"secondary\"\n            onClick={() => show(\"pk\")}\n          >\n            Private Keys{\" \"}\n          </Button>\n        </div>\n        {/* : null} */}\n      </Card>\n\n      <Card\n        style={{\n          width: \"auto\",\n          margin: \"auto\",\n          marginTop: \"2rem\",\n          marginBottom: \"2rem\",\n          padding: \"2rem\",\n          border: \"dark\",\n          backgroundColor: \"#3EB489\",\n          minHeight: \"50vh\",\n          color: \"#3EB489\",\n        }}\n      >\n        {/* Default/ Home Page */}\n        {showHomePage && (\n          <Card\n            style={{\n              marginTop: \"1rem\",\n              marginBottom: \"1rem\",\n              boarder: \"dark\",\n              padding: \"1rem\",\n              width: \"auto\",\n              contentAlign: \"left\",\n              margin: \"auto\",\n              backgroundColor: \"#282c34\",\n              color: \"#3EB489\",\n              fontWeight: \"bold\",\n            }}\n          >\n            <Card.Title style={{ color: \"#3EB489\" }}>\n              <div\n                style={{\n                  color: \"#3EB489\",\n                  fontWeight: \"bold\",\n                  borderColor: \"white\",\n                  border: \"white\",\n                }}\n              ></div>\n            </Card.Title>\n\n            <div\n              style={{\n                color: \"#3EB489\",\n                fontWeight: \"bold\",\n                border: \"dark\",\n              }}\n            >\n              <Card.Text>\n                <div\n                  style={{\n                    color: \"#3EB489\",\n                    fontWeight: \"bold\",\n                    border: \"dark\",\n                  }}\n                >\n                  <h2>\n                    <p style={{ color: \"#3EB489\" }}>\n                      Thank you {address} for participating in the beta release of{\" \"}\n                      <span style={{ color: \"#3EB489\" }}>Tea</span>{\" \"}\n                    </p>\n                  </h2>\n                </div>\n                <p></p>\n              </Card.Text>\n\n              <Card\n                style={{\n                  marginTop: \"1rem\",\n                  marginBottom: \"1rem\",\n                  boarder: \"dark\",\n                  borderColor: \"#3EB489\",\n                  padding: \"1rem\",\n                  width: \"auto\",\n                  contentAlign: \"left\",\n                  margin: \"auto\",\n                  backgroundColor: \"#282c34\",\n                  color: \"#3EB489\",\n                  fontWeight: \"bold\",\n                  fontSize: \"1.2rem\",\n                }}\n              >\n                If this is your first time using Tea, have a look below for a quick overview on how to use Tea\n                <p></p>\n                <Card\n                  style={{\n                    marginTop: \"1rem\",\n                    marginBottom: \"1rem\",\n                    boarder: \"dark\",\n                    borderColor: \"#3EB489\",\n                    padding: \"1rem\",\n                    width: \"auto\",\n                    alignItems: \"left\",\n                    margin: \"auto\",\n                    backgroundColor: \"#282c34\",\n                    color: \"#3EB489\",\n                    fontWeight: \"bold\",\n                    fontSize: \"1rem\",\n                  }}\n                >\n                  <ul style={{ textAlign: \"left\" }}>\n                    <li>\n                      <Button\n                        style={{ backgroundColor: \"#023020\", color: \"#3EB489\", fontWeight: \"bold\", width: 200 }}\n                        variant=\"secondary\"\n                        onClick={() => purchaseTransaction()}\n                      >\n                        {\" \"}\n                        Pay Transaction Fee\n                      </Button>{\" \"}\n                      Pay for a transaction fee.\n                    </li>\n                    <p></p>\n                    <li>\n                      <Button\n                        style={{ backgroundColor: \"#023020\", color: \"#3EB489\", fontWeight: \"bold\", width: 200 }}\n                        variant=\"secondary\"\n                        onClick={() => show(\"browse\") && listOrders()}\n                      >\n                        {\" \"}\n                        Browse\n                      </Button>{\" \"}\n                      View all the current trades avaliable.\n                    </li>\n                    <p></p>\n                    <li>\n                      <Button\n                        style={{ backgroundColor: \"#023020\", color: \"#3EB489\", fontWeight: \"bold\", width: 200 }}\n                        variant=\"secondary\"\n                        onClick={() => show(\"sell\")}\n                      >\n                        {\" \"}\n                        New Trade{\" \"}\n                      </Button>{\" \"}\n                      Create a new trade.\n                    </li>\n                    <p></p>\n                    <li>\n                      <Button\n                        style={{ backgroundColor: \"#023020\", color: \"#3EB489\", fontWeight: \"bold\", width: 200 }}\n                        variant=\"secondary\"\n                        onClick={() => {\n                          show(\"payorder\");\n                        }}\n                      >\n                        {\" \"}\n                        Pending Pay Orders <span style={{ color: \"lightgreen\" }}>{pendingPayNumberAmmount}</span>\n                      </Button>{\" \"}\n                      Vew all the trades you have initiated and are waiting for payment.\n                    </li>\n                    <p></p>\n                    <li>\n                      <Button\n                        style={{ backgroundColor: \"#023020\", color: \"#3EB489\", fontWeight: \"bold\", width: 200 }}\n                        variant=\"secondary\"\n                        onClick={() => show(\"pk\")}\n                      >\n                        Private Keys{\" \"}\n                      </Button>\n                      View stored private keys.\n                    </li>\n                  </ul>\n                </Card>\n              </Card>\n            </div>\n          </Card>\n        )}\n\n        {/* browse Orders */}\n        <Card.Body>\n          {showBrowseOrders ? (\n            <Card\n              style={{\n                width: \"auto\",\n                margin: \"auto\",\n                marginTop: \"2rem\",\n                marginBottom: \"2rem\",\n                padding: \"2rem\",\n                border: \"dark\",\n                backgroundColor: \"#282c34\",\n                color: \"#3EB489\",\n                fontWeight: \"bold\",\n              }}\n            >\n              <Dropdown\n                style={{\n                  marginTop: \"1rem\",\n                  marginBottom: \"1rem\",\n                }}\n              >\n                Filter:{\"  \"}\n                <Dropdown.Toggle\n                  variant=\"secondary\"\n                  style={{ backgroundColor: \"#023020\", color: \"#3EB489\", fontWeight: \"bold\" }}\n                  id=\"dropdown-basic\"\n                >\n                  <img src={returnLogo(sortBy)} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" /> <span> {sortBy}</span>\n                </Dropdown.Toggle>\n                <Dropdown.Menu style={{ backgroundColor: \"#023020\", color: \"#3EB489\", fontWeight: \"bold\" }}>\n                  <Dropdown.Item onClick={() => setSortBy(\"polygon\")}>\n                    {\" \"}\n                    <img src={returnLogo(\"polygon\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> Polygon </span>\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => setSortBy(\"altcoinchain\")}>\n                    <img src={returnLogo(\"altcoinchain\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> AltCoinChain </span>\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => setSortBy(\"radiant\")}>\n                    <img src={returnLogo(\"radiant\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> Radiant </span>\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => setSortBy(\"flora\")}>\n                    <img src={returnLogo(\"flora\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> FloraChain </span>\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => setSortBy(\"canto\")}>\n                    <img src={returnLogo(\"canto\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> Canto </span>\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => setSortBy(\"etho\")}>\n                    <img src={returnLogo(\"etho\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> Etho </span>\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => setSortBy(\"litecoin\")}>\n                    <img src={returnLogo(\"litecoin\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> Litecoin </span>\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => setSortBy(\"confluxEspace\")}>\n                    <img src={returnLogo(\"confluxEspace\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> confluxEspace </span>\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => setSortBy(\"bitcoin\")}>\n                    <img src={returnLogo(\"bitcoin\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> Bitcoin </span>\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => setSortBy(\"ethereumclassic\")}>\n                    <img src={returnLogo(\"ethereumclassic\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> Ethereum Classic </span>\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => setSortBy(\"ethereum\")}>\n                    <img src={returnLogo(\"ethereum\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> Ethereum</span>{\" \"}\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => setSortBy(\"grams\")}>\n                    <img src={returnLogo(\"grams\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> Grams</span>\n                  </Dropdown.Item>\n                  {/* <Dropdown.Item onClick={() => setSortBy(\"kaspa\")}>Kaspa</Dropdown.Item>\n                <Dropdown.Item onClick={() => setSortBy(\"radiant\")}>Radiant</Dropdown.Item> */}\n                  <Dropdown.Item onClick={() => setSortBy(\"celo\")}>\n                    <img src={returnLogo(\"celo\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> Celo</span>\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => setSortBy(\"kaspa\")}>\n                    <img src={returnLogo(\"kaspa\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> Kaspa </span>\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => setSortBy(\"solana\")}>\n                    <img src={returnLogo(\"solana\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> Solana</span>\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => setSortBy(\"octa\")}>\n                    <img src={returnLogo(\"octa\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> Octa</span>\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => setSortBy(\"bscUSDT\")}>\n                    <img src={returnLogo(\"bscUSDT\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> BSC-USDT</span>\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => setSortBy(\"miningGame\")}>\n                    <img src={returnLogo(\"miningGame\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> MiningGame NFT</span>\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={() => show(\"private\") & setSortBy(\"none\")}>\n                    <img src={returnLogo(\"tp\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                    <span style={{ color: \"#3EB489\" }}> Private</span>\n                  </Dropdown.Item>\n                </Dropdown.Menu>\n              </Dropdown>\n              <Button\n                style={{ backgroundColor: \"#023020\", color: \"#3EB489\", fontWeight: \"bold\" }}\n                variant=\"secondary\"\n                onClick={listOrders}\n              >\n                Refresh\n              </Button>\n              {/* Show Private Buy Pannel that allows the user to initate a trade by providing a order ID */}\n              {showPrivateBuy ? (\n                <Card.Body>\n                  <Form>\n                    <Form.Group controlId=\"formOrderId\">\n                      <Row>\n                        <Col\n                          style={{\n                            marginTop: \"1rem\",\n                            marginBottom: \"1rem\",\n                            boarder: \"dark\",\n                            padding: \"1rem\",\n                            width: \"auto\",\n                            textAlign: \"right\",\n                            margin: \"auto\",\n                          }}\n                        >\n                          <Form.Label>Order ID</Form.Label>\n                        </Col>\n                        <Col\n                          style={{\n                            marginTop: \"1rem\",\n                            marginBottom: \"1rem\",\n                            boarder: \"dark\",\n                            padding: \"1rem\",\n                            width: \"auto\",\n                            contentAlign: \"center\",\n                            margin: \"auto\",\n                          }}\n                        >\n                          <Form.Control\n                            style={{ background: \"#023020\", color: \"#3EB489\" }}\n                            type=\"text\"\n                            placeholder=\"\"\n                            onChange={e => setOrderId(e.target.value)}\n                          />\n                        </Col>\n                      </Row>\n                    </Form.Group>\n                    <p></p>\n                    {/* <Button style={{ backgroundColor: \"#023020\", color: \"#3EB489\", fontWeight: \"bold\" }} variant=\"secondary\" onClick={fetchTradeInfo}>Fetch Trade Info</Button> */}\n                    <p></p>\n                    <Button\n                      style={{ backgroundColor: \"#023020\", color: \"#3EB489\", fontWeight: \"bold\" }}\n                      variant=\"secondary\"\n                      onClick={privatebuy}\n                    >\n                      Buy\n                    </Button>\n                    <br />\n                    {/* Show trade info once button is clicked */}\n                  </Form>\n                </Card.Body>\n              ) : null}\n\n              {currentOpenOrders.map(order => (\n                <Card\n                  style={{\n                    backgroundColor: \"#282c34\",\n                    color: \"#3EB489\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  {order.locked === false && (order.currency === sortBy || order.tradeAsset == sortBy) ? (\n                    <Card\n                      style={{\n                        width: \"auto\",\n                        margin: \"auto\",\n                        marginTop: \"2rem\",\n                        marginBottom: \"2rem\",\n                        padding: \"2rem\",\n                        border: \"dark\",\n                        backgroundColor: \"#282c34\",\n                        color: \"#3EB489\",\n                        fontWeight: \"bold\",\n                        borderColor: \"#3EB489\",\n                      }}\n                    >\n                      <Card.Title>Order: {order.txid}</Card.Title>\n                      <Card.Body>\n                        <Container>\n                          <Row>\n                            <Col>\n                              <Container\n                                style={{\n                                  padding: \"1rem\",\n                                  borderRadius: \"1rem\",\n                                }}\n                              >\n                                <Row>\n                                  <Col> \n                                    <span>Offered Currency: </span>\n                                    <div>\n                                      <span>\n                                        {web3.utils.fromWei(order.amount.toString(), \"ether\")}{\" \"}\n                                        <img\n                                          src={returnLogo(order.currency)}\n                                          alt=\"Tea Party Logo\"\n                                          width=\"25\"\n                                          height=\"25\"\n                                        />\n                                         {/* if the order is for a NFT (mining game) then show the NFT ID */}\n                                        {order.currency === \"miningGame\" ? (\n                                          <span> NFT ID: {order.nftID}</span>\n                                        ) : (\n                                          <span> </span>\n                                        )}\n                                        {/* {\"  \" + order.currency} */}\n                                      </span>\n                                    </div>\n                                  </Col>\n                                  <Col>\n                                    <span>Trading Pair </span>\n                                    <div\n                                      style={{\n                                        color: \"black\",\n                                        fontSize: \"1rem\",\n                                        fontWeight: \"bold\",\n                                        backgroundColor: \"#282c34\",\n                                        color: \"#3EB489\",\n                                      }}\n                                    >\n                                      <span>\n                                        {web3.utils.fromWei(order.price.toString(), \"ether\")}{\" \"}\n                                        <img\n                                          src={returnLogo(order.tradeAsset)}\n                                          alt=\"Tea Party Logo\"\n                                          width=\"25\"\n                                          height=\"25\"\n                                        />\n                                        {order.tradeAsset === \"ANY\" ? \" USD\" : \" \"}\n                                      </span>\n                                    </div>\n                                  </Col>\n                                </Row>\n                              </Container>\n                            </Col>\n                          </Row>\n                          {/* Here we have some example Buy Order Functionality */}\n                          <Card\n                            style={{\n                              border: \"dark\",\n                              marginTop: \"1rem\",\n                              marginBottom: \"1rem\",\n                              padding: \"1rem\",\n                              width: \"auto\",\n                              contentAlign: \"center\",\n                              margin: \"auto\",\n                              backgroundColor: \"lightgrey\",\n                              backgroundColor: \"#282c34\",\n                              color: \"#3EB489\",\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            <Card.Title>Start a Trade</Card.Title>\n                            <input\n                              style={{ background: \"#023020\", color: \"#3EB489\" }}\n                              type=\"text\"\n                              placeholder=\"Buyers Refund Address\"\n                              onChange={e => setBuyersRefundAddress(e.target.value)}\n                            />\n                            <input\n                              style={{ background: \"#023020\", color: \"#3EB489\" }}\n                              type=\"text\"\n                              placeholder=\"Buyers Shipping Address\"\n                              onChange={e => setBuyerShippingAddress(e.target.value)}\n                            />\n                            {order.tradeAsset === \"ANY\" ? (\n                              <div\n                                style={{\n                                  marginTop: \"1rem\",\n                                  marginBottom: \"1rem\",\n                                  boarder: \"dark\",\n                                  padding: \"1rem\",\n                                  width: \"auto\",\n                                  contentAlign: \"center\",\n                                  margin: \"auto\",\n                                }}\n                              >\n                                <Dropdown\n                                  style={{\n                                    marginTop: \"1rem\",\n                                    marginBottom: \"1rem\",\n                                  }}\n                                >\n                                  Select Trade Asset:\n                                  <Dropdown.Toggle\n                                    style={{ backgroundColor: \"#023020\", color: \"#3EB489\" }}\n                                    variant=\"secondary\"\n                                    id=\"dropdown-basic\"\n                                  >\n                                    <img src={returnLogo(tradeAsset)} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                                    <span> {tradeAsset}</span>\n                                  </Dropdown.Toggle>\n                                  <Dropdown.Menu\n                                    style={{ backgroundColor: \"#023020\", color: \"#3EB489\", fontWeight: \"bold\" }}\n                                  >\n                                    <Dropdown.Item onClick={() => setTradeAsset(\"polygon\")}>\n                                      <img src={returnLogo(\"polygon\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />\n                                      <span style={{ color: \"#3EB489\" }}> Polygon </span>\n                                    </Dropdown.Item>\n                                    <Dropdown.Item onClick={() => setTradeAsset(\"altcoinchain\")}>\n                                      <img\n                                        src={returnLogo(\"altcoinchain\")}\n                                        alt=\"Tea Party Logo\"\n                                        width=\"25\"\n                                        height=\"25\"\n                                      />\n                                      <span style={{ color: \"#3EB489\" }}> AltCoinChain</span>\n                                    </Dropdown.Item>\n                                    <Dropdown.Item onClick={() => setTradeAsset(\"radiant\")}>\n                                      <img src={returnLogo(\"radiant\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />\n                                      <span style={{ color: \"#3EB489\" }}> Radiant</span>\n                                    </Dropdown.Item>\n                                    <Dropdown.Item onClick={() => setTradeAsset(\"flora\")}>\n                                      <img src={returnLogo(\"flora\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />\n                                      <span style={{ color: \"#3EB489\" }}> FloraChain</span>\n                                    </Dropdown.Item>\n                                    <Dropdown.Item onClick={() => setTradeAsset(\"canto\")}>\n                                      <img src={returnLogo(\"canto\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />\n                                      <span style={{ color: \"#3EB489\" }}> Canto</span>\n                                    </Dropdown.Item>\n                                    <Dropdown.Item onClick={() => setTradeAsset(\"etho\")}>\n                                      <img src={returnLogo(\"etho\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />\n                                      <span style={{ color: \"#3EB489\" }}> Etho</span>\n                                    </Dropdown.Item>\n                                    <Dropdown.Item onClick={() => setTradeAsset(\"litecoin\")}>\n                                      <img src={returnLogo(\"litecoin\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />\n                                      <span style={{ color: \"#3EB489\" }}> Litecoin</span>\n                                    </Dropdown.Item>\n                                    <Dropdown.Item onClick={() => setTradeAsset(\"confluxEspace\")}>\n                                      <img\n                                        src={returnLogo(\"confluxEspace\")}\n                                        alt=\"Tea Party Logo\"\n                                        width=\"25\"\n                                        height=\"25\"\n                                      />\n                                      <span style={{ color: \"#3EB489\" }}> confluxEspace</span>\n                                    </Dropdown.Item>\n                                    <Dropdown.Item onClick={() => setTradeAsset(\"bitcoin\")}>\n                                      <img src={returnLogo(\"bitcoin\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />\n                                      <span style={{ color: \"#3EB489\" }}> Bitcoin</span>\n                                    </Dropdown.Item>\n                                    <Dropdown.Item onClick={() => setTradeAsset(\"ethereumclassic\")}>\n                                      <img\n                                        src={returnLogo(\"ethereumclassic\")}\n                                        alt=\"Tea Party Logo\"\n                                        width=\"25\"\n                                        height=\"25\"\n                                      />\n                                      <span style={{ color: \"#3EB489\" }}> Ethereum Classic</span>\n                                    </Dropdown.Item>\n                                    <Dropdown.Item onClick={() => setTradeAsset(\"ethereum\")}>\n                                      <img src={returnLogo(\"ethereum\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />\n                                      ./kb\n                                      <span style={{ color: \"#3EB489\" }}> Ethereum</span>\n                                    </Dropdown.Item>\n                                    <Dropdown.Item onClick={() => setTradeAsset(\"grams\")}>\n                                      <img src={returnLogo(\"grams\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />\n                                      <span style={{ color: \"#3EB489\" }}> Grams</span>\n                                    </Dropdown.Item>\n                                    {/* <Dropdown.Item onClick={() => setTradeAsset(\"kaspa\")}>Kaspa</Dropdown.Item>\n                                  <Dropdown.Item onClick={() => setTradeAsset(\"radiant\")}>Radiant</Dropdown.Item> */}\n                                    <Dropdown.Item onClick={() => setTradeAsset(\"celo\")}>\n                                      <img src={returnLogo(\"celo\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />\n                                      <span style={{ color: \"#3EB489\" }}> Celo</span>\n                                    </Dropdown.Item>\n                                    <Dropdown.Item onClick={() => setTradeAsset(\"kaspa\")}>\n                                      <img src={returnLogo(\"kaspa\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />\n                                      <span style={{ color: \"#3EB489\" }}> Kaspa</span>\n                                    </Dropdown.Item>\n                                    <Dropdown.Item onClick={() => setTradeAsset(\"solana\")}>\n                                      <img src={returnLogo(\"solana\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />\n                                      <span style={{ color: \"#3EB489\" }}> Solana</span>\n                                    </Dropdown.Item>\n                                    <Dropdown.Item onClick={() => setTradeAsset(\"miningGame\")}>\n                                      <img src={returnLogo(\"miningGame\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />\n                                      <span style={{ color: \"#3EB489\" }}> MiningGame NFT</span>\n                                    </Dropdown.Item>\n                                  </Dropdown.Menu>\n                                </Dropdown>\n                              </div>\n                            ) : null}\n                            <Button\n                              style={{ backgroundColor: \"#023020\", color: \"#3EB489\", fontWeight: \"bold\" }}\n                              variant=\"secondary\"\n                              onClick={() => {\n                                if (order.tradeAsset === \"ANY\") {\n                                  setTradeAsset(tradeAsset);\n                                } else {\n                                  setTradeAsset(order.tradeAsset);\n                                }\n\n                                buy(order.txid);\n                              }}\n                            >\n                              Buy\n                            </Button>\n                          </Card>\n                        </Container>\n                      </Card.Body>\n                    </Card>\n                  ) : null}\n                </Card>\n              ))}\n            </Card>\n          ) : null}\n        </Card.Body>\n\n        {/* Sell Order */}\n        {showBuyOrder ? (\n          <Card.Body\n            style={{\n              marginTop: \"1rem\",\n              marginBottom: \"1rem\",\n              boarder: \"dark\",\n              padding: \"1rem\",\n              width: \"auto\",\n              contentAlign: \"center\",\n              margin: \"auto\",\n              backgroundColor: \"#282c34\",\n              color: \"#3EB489\",\n              fontWeight: \"bold\",\n            }}\n          >\n            <Card.Title\n              style={{\n                marginTop: \"1rem\",\n                marginBottom: \"1rem\",\n                boarder: \"dark\",\n                padding: \"1rem\",\n                width: \"auto\",\n                contentAlign: \"center\",\n                margin: \"auto\",\n                backgroundColor: \"#282c34\",\n                color: \"#3EB489\",\n                fontWeight: \"bold\",\n              }}\n            >\n              Create A New Trade\n            </Card.Title>\n            <Form\n              style={{\n                marginTop: \"1rem\",\n                marginBottom: \"1rem\",\n                boarder: \"dark\",\n                padding: \"1rem\",\n                width: \"auto\",\n                contentAlign: \"left\",\n                margin: \"auto\",\n                backgroundColor: \"#282c34\",\n                color: \"#3EB489\",\n                fontWeight: \"bold\",\n              }}\n            >\n              <Form.Group controlId=\"formListOrder\">\n                <Row>\n                  <Col\n                    style={{\n                      marginTop: \"1rem\",\n                      marginBottom: \"1rem\",\n                      boarder: \"dark\",\n                      padding: \"1rem\",\n                      width: \"auto\",\n                      textAlign: \"right\",\n                      margin: \"auto\",\n                    }}\n                  >\n                    Currency\n                  </Col>\n                  <Col\n                    style={{\n                      marginTop: \"1rem\",\n                      marginBottom: \"1rem\",\n                      boarder: \"dark\",\n                      padding: \"1rem\",\n                      width: \"auto\",\n                      margin: \"auto\",\n                      textAlign: \"left\",\n                    }}\n                  >\n                    <Dropdown>\n                      <Dropdown.Toggle\n                        style={{ backgroundColor: \"#023020\", color: \"#3EB489\" }}\n                        variant=\"secondary\"\n                        id=\"dropdown-basic\"\n                      >\n                        <img src={returnLogo(currency)} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                        <span> {currency}</span>\n                      </Dropdown.Toggle>\n                      <Dropdown.Menu style={{ backgroundColor: \"#023020\", color: \"#3EB489\", fontWeight: \"bold\" }}>\n                        <Dropdown.Item onClick={() => setCurrency(\"polygon\")}>\n                          <img src={returnLogo(\"polygon\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Polygon </span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setCurrency(\"radiant\")}>\n                          <img src={returnLogo(\"radiant\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Radiant </span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setCurrency(\"ethereum\")}>\n                          <img src={returnLogo(\"ethereum\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Ethereum</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setCurrency(\"altcoinchain\")}>\n                          <img src={returnLogo(\"altcoinchain\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> AltCoinCash</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setCurrency(\"flora\")}>\n                          <img src={returnLogo(\"flora\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> FloraChain</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setCurrency(\"canto\")}>\n                          <img src={returnLogo(\"canto\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Canto</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setCurrency(\"etho\")}>\n                          <img src={returnLogo(\"etho\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Etho</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setCurrency(\"litecoin\")}>\n                          <img src={returnLogo(\"litecoin\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Litecoin</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setCurrency(\"confluxEspace\")}>\n                          <img src={returnLogo(\"confluxEspace\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> confluxEspace</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setCurrency(\"bitcoin\")}>\n                          <img src={returnLogo(\"bitcoin\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Bitcoin</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setCurrency(\"ethereumclassic\")}>\n                          <img src={returnLogo(\"ethereumclassic\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Ethereum Classic</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setCurrency(\"grams\")}>\n                          <img src={returnLogo(\"grams\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Grams</span>\n                        </Dropdown.Item>\n                        {/* <Dropdown.Item onClick={() => setCurrency(\"kaspa\")}>Kaspa</Dropdown.Item>\n                  <Dropdown.Item onClick={() => setCurrency(\"radiant\")}>Radiant</Dropdown.Item> */}\n                        <Dropdown.Item onClick={() => setCurrency(\"celo\")}>\n                          <img src={returnLogo(\"celo\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Celo</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setCurrency(\"kaspa\")}>\n                          <img src={returnLogo(\"kaspa\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Kaspa</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setCurrency(\"solana\")}>\n                          <img src={returnLogo(\"solana\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Solana</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setCurrency(\"octa\")}>\n                          <img src={returnLogo(\"octa\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Octa</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setCurrency(\"bscUSDT\")}>\n                          <img src={returnLogo(\"bscUSDT\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> BSC-USDT</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setCurrency(\"miningGame\")}>\n                          <img src={returnLogo(\"miningGame\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> MiningGame NFT</span>\n                        </Dropdown.Item>\n                      </Dropdown.Menu>\n                    </Dropdown>\n                  </Col>\n                </Row>\n              </Form.Group>\n              <Form.Group controlId=\"formListAmount\">\n                <Row>\n                  {/* If the currency is miningGame, show the NFT ID field. else show the amount field */}\n                  {currency === \"miningGame\" ? (\n                    <div>\n                      <Col\n                        style={{\n                          marginTop: \"1rem\",\n                          marginBottom: \"1rem\",\n                          boarder: \"dark\",\n                          padding: \"1rem\",\n                          width: \"auto\",\n                          textAlign: \"right\",\n                          margin: \"auto\",\n                        }}\n                      >\n                        <Form.Label>NFT ID</Form.Label>\n                      </Col>\n                      <Col\n                        style={{\n                          marginTop: \"1rem\",\n                          marginBottom: \"1rem\",\n                          boarder: \"dark\",\n                          padding: \"1rem\",\n                          width: \"auto\",\n                          textAlign: \"left\",\n                          margin: \"auto\",\n                        }}\n                      >\n                        <Form.Control\n                          type=\"text\"\n                          placeholder=\"NFT ID\"\n                          value={nftID}\n                          style={{ background: \"#023020\", color: \"#3EB489\" }}\n                          onChange={(e) => setNftID(e.target.value)}\n                        />\n                      </Col>\n                    </div>\n                  ) : (\n                    <div>\n                      <Col\n                        style={{\n                          marginTop: \"1rem\",\n                          marginBottom: \"1rem\",\n                          boarder: \"dark\",\n                          padding: \"1rem\",\n                          width: \"auto\",\n                          textAlign: \"right\",\n                          margin: \"auto\",\n                        }}\n                      >\n                        <Form.Label>Amount</Form.Label>\n                      </Col>\n                      <Col\n                        style={{\n                          marginTop: \"1rem\",\n                          marginBottom: \"1rem\",\n                          boarder: \"dark\",\n                          padding: \"1rem\",\n                          width: \"auto\",\n                          textAlign: \"left\",\n                          margin: \"auto\",\n                        }}\n                      >\n                        <Form.Control\n                          type=\"text\"\n                          placeholder=\"Amount\"\n                          style={{ background: \"#023020\", color: \"#3EB489\" }}\n                          value={amount}\n                          onChange={(e) => setAmount(e.target.value)}\n                        />\n                      </Col>\n                    </div>\n                  )}\n                </Row>\n              </Form.Group>\n              <Form.Group controlId=\"formListAmount\">\n                <Row>\n                  <Col\n                    style={{\n                      marginTop: \"1rem\",\n                      marginBottom: \"1rem\",\n                      boarder: \"dark\",\n                      padding: \"1rem\",\n                      width: \"auto\",\n                      textAlign: \"right\",\n                      margin: \"auto\",\n                    }}\n                  >\n                    <Form.Label>Pair</Form.Label>\n                  </Col>\n                  <Col\n                    style={{\n                      marginTop: \"1rem\",\n                      marginBottom: \"1rem\",\n                      boarder: \"dark\",\n                      padding: \"1rem\",\n                      width: \"auto\",\n                      textAlign: \"left\",\n                      margin: \"auto\",\n                    }}\n                  >\n                    <Dropdown\n                      style={{\n                        marginTop: \"1rem\",\n                        marginBottom: \"1rem\",\n                      }}\n                    >\n                      <Dropdown.Toggle\n                        style={{ backgroundColor: \"#023020\", color: \"#3EB489\" }}\n                        variant=\"secondary\"\n                        id=\"dropdown-basic\"\n                      >\n                        <img src={returnLogo(tradeAsset)} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                        <span> {tradeAsset}</span>\n                      </Dropdown.Toggle>\n                      <Dropdown.Menu style={{ backgroundColor: \"#023020\", color: \"#3EB489\", fontWeight: \"bold\" }}>\n                        <Dropdown.Item onClick={() => setTradeAsset(\"polygon\")}>\n                          <img src={returnLogo(\"polygon\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Polygon </span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setTradeAsset(\"radiant\")}>\n                          <img src={returnLogo(\"radiant\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Radiant </span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setTradeAsset(\"ethereum\")}>\n                          <img src={returnLogo(\"ethereum\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Ethereum</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setTradeAsset(\"altcoinchain\")}>\n                          <img src={returnLogo(\"altcoinchain\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> AltCoinCash</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setTradeAsset(\"flora\")}>\n                          <img src={returnLogo(\"flora\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> FloraChain</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setTradeAsset(\"canto\")}>\n                          <img src={returnLogo(\"canto\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Canto</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setTradeAsset(\"etho\")}>\n                          <img src={returnLogo(\"etho\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Etho</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setTradeAsset(\"litecoin\")}>\n                          <img src={returnLogo(\"litecoin\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Litecoin</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setTradeAsset(\"confluxEspace\")}>\n                          <img src={returnLogo(\"confluxEspace\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> confluxEspace</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setTradeAsset(\"bitcoin\")}>\n                          <img src={returnLogo(\"bitcoin\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Bitcoin</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setTradeAsset(\"ethereumclassic\")}>\n                          <img src={returnLogo(\"ethereumclassic\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Ethereum Classic</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setTradeAsset(\"grams\")}>\n                          <img src={returnLogo(\"grams\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Grams</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setTradeAsset(\"celo\")}>\n                          <img src={returnLogo(\"celo\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Celo</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setTradeAsset(\"kaspa\")}>\n                          <img src={returnLogo(\"kaspa\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Kaspa</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setTradeAsset(\"solana\")}>\n                          <img src={returnLogo(\"solana\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Solana</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setTradeAsset(\"octa\")}>\n                          <img src={returnLogo(\"octa\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> Octa</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setTradeAsset(\"bscUSDT\")}>\n                          <img src={returnLogo(\"bscUSDT\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}> BSC-USDT</span>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => setTradeAsset(\"ANY\")}>\n                          <img src={returnLogo(\"ANY\")} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                          <span style={{ color: \"#3EB489\" }}>Any</span>\n                        </Dropdown.Item>\n                      </Dropdown.Menu>\n                    </Dropdown>\n                  </Col>\n                </Row>\n              </Form.Group>\n              <Form.Group controlId=\"formListAmount\">\n                <Row>\n                  <Col\n                    style={{\n                      marginTop: \"1rem\",\n                      marginBottom: \"1rem\",\n                      boarder: \"dark\",\n                      padding: \"1rem\",\n                      width: \"auto\",\n                      textAlign: \"right\",\n                      margin: \"auto\",\n                    }}\n                  >\n                    <Form.Label>{tradeAsset === \"ANY\" ? \"Price / USD\" : \"Amount\"} </Form.Label>\n                  </Col>\n                  <Col\n                    style={{\n                      marginTop: \"1rem\",\n                      marginBottom: \"1rem\",\n                      boarder: \"dark\",\n                      padding: \"1rem\",\n                      width: \"auto\",\n                      textAlign: \"right\",\n                      margin: \"auto\",\n                    }}\n                  >\n                    <Form.Control\n                      style={{ background: \"#023020\", color: \"#3EB489\" }}\n                      type=\"text\"\n                      placeholder=\"\"\n                      onChange={e => setPrice(e.target.value)}\n                    />\n                  </Col>\n                </Row>\n              </Form.Group>\n              <Form.Group controlId=\"formShippingAddress\">\n                <Row>\n                  <Col\n                    style={{\n                      marginTop: \"1rem\",\n                      marginBottom: \"1rem\",\n                      boarder: \"dark\",\n                      padding: \"1rem\",\n                      width: \"auto\",\n                      textAlign: \"right\",\n                      margin: \"auto\",\n                    }}\n                  >\n                    <Form.Label>Shipping Address</Form.Label>\n                  </Col>\n                  <Col\n                    style={{\n                      marginTop: \"1rem\",\n                      marginBottom: \"1rem\",\n                      boarder: \"dark\",\n                      padding: \"1rem\",\n                      width: \"auto\",\n                      textAlign: \"left\",\n                      margin: \"auto\",\n                    }}\n                  >\n                    <Form.Control\n                      style={{ background: \"#023020\", color: \"#3EB489\" }}\n                      type=\"text\"\n                      placeholder=\"\"\n                      onChange={e => setSellerShippingAddress(e.target.value)}\n                    />\n                  </Col>\n                </Row>\n              </Form.Group>\n              <Form.Group controlId=\"returnShippingAddress\">\n                <Row>\n                  <Col\n                    style={{\n                      marginTop: \"1rem\",\n                      marginBottom: \"1rem\",\n                      boarder: \"dark\",\n                      padding: \"1rem\",\n                      width: \"auto\",\n                      textAlign: \"right\",\n                      margin: \"auto\",\n                    }}\n                  >\n                    <Form.Label>Return Shipping Address</Form.Label>\n                  </Col>\n                  <Col\n                    style={{\n                      marginTop: \"1rem\",\n                      marginBottom: \"1rem\",\n                      boarder: \"dark\",\n                      padding: \"1rem\",\n                      width: \"auto\",\n                      contentAlign: \"left\",\n                      margin: \"auto\",\n                    }}\n                  >\n                    <Form.Control\n                      style={{ background: \"#023020\", color: \"#3EB489\" }}\n                      type=\"text\"\n                      placeholder=\"\"\n                      onChange={e => setSellersRefundAddress(e.target.value)}\n                    />\n                  </Col>\n                </Row>\n              </Form.Group>\n              <Form.Group controlId=\"privateSell\">\n                <Row>\n                  <Col\n                    style={{\n                      marginTop: \"1rem\",\n                      marginBottom: \"1rem\",\n                      boarder: \"dark\",\n                      padding: \"1rem\",\n                      width: \"auto\",\n                      textAlign: \"right\",\n                      margin: \"auto\",\n                    }}\n                  >\n                    <Form.Label>Private Sell</Form.Label>\n                  </Col>\n                  <Col\n                    style={{\n                      marginTop: \"1rem\",\n                      marginBottom: \"1rem\",\n                      boarder: \"dark\",\n                      padding: \"1rem\",\n                      width: \"auto\",\n                      textAlign: \"left\",\n                      margin: \"auto\",\n                    }}\n                  >\n                    <Form.Check type=\"checkbox\" onChange={e => setPrivateSell(e.target.checked)} />\n                  </Col>\n                </Row>\n              </Form.Group>\n              <p></p>\n              <Button\n                style={{ backgroundColor: \"#023020\", color: \"#3EB489\", fontWeight: \"bold\" }}\n                variant=\"secondary\"\n                onClick={sell}\n              >\n                Sell\n              </Button>\n              <p></p>\n              {/* <Button\n                style={{ backgroundColor: \"#023020\", color: \"#3EB489\", fontWeight: \"bold\" }}\n                variant=\"secondary\"\n                onClick={assistedSell}\n              >\n                Assisted Sell\n              </Button> */}\n              <br />\n              <span>{sellOrderResponse}</span>\n            </Form>\n          </Card.Body>\n        ) : null}\n\n        {/* Show Pending Payment */}\n        {showPendingPayOrders && userCurrentPendingPayOrders ? (\n          <Card.Body>\n            <Card\n              style={{\n                marginTop: \"1rem\",\n                marginBottom: \"1rem\",\n                boarder: \"dark\",\n                padding: \"1rem\",\n                width: \"auto\",\n                contentAlign: \"left\",\n                margin: \"auto\",\n                backgroundColor: \"#282c34\",\n                color: \"#3EB489\",\n                fontWeight: \"bold\",\n              }}\n            >\n              <div>\n                <span\n                  style={{\n                    fontSize: \"1.5rem\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  Pending Pay Orders:\n                </span>\n                {userCurrentPendingPayOrders.length > 0 ? (\n                  userCurrentPendingPayOrders.map(order => (\n                    <Card\n                      style={{\n                        width: \"auto\",\n                        margin: \"auto\",\n                        marginTop: \"2rem\",\n                        marginBottom: \"2rem\",\n                        padding: \"2rem\",\n                        border: \"dark\",\n                        backgroundColor: \"#282c34\",\n                      }}\n                    >\n                      <Card.Title>\n                        {\" \"}\n                        Pending Pay Order{\" \"}\n                        <img src={returnLogo(order.network)} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                      </Card.Title>\n                      <Card.Body>\n                        <Card.Text>\n                          <span>Address: {order.address}</span>\n                          <br />\n                          <span>Ammount: {web3.utils.fromWei(order.amount.toString(), \"ether\")} </span>\n                          <br />\n                          <span>Network: {order.network}</span>\n                          <br />\n                        </Card.Text>\n                      </Card.Body>\n                    </Card>\n                  ))\n                ) : (\n                  <span>No Pending Pay Orders</span>\n                )}\n              </div>\n            </Card>\n          </Card.Body>\n        ) : null}\n\n        {/* Show Private Keys */}\n        {showPrivateKeys && userPrivateKeys ? (\n          <Card.Body>\n            <div\n              style={{\n                marginTop: \"1rem\",\n                marginBottom: \"1rem\",\n                boarder: \"dark\",\n                padding: \"1rem\",\n                width: \"auto\",\n                contentAlign: \"left\",\n                margin: \"auto\",\n                backgroundColor: \"#282c34\",\n                color: \"#3EB489\",\n                fontWeight: \"bold\",\n              }}\n            >\n              <div>\n                <span\n                  style={{\n                    fontSize: \"1.5rem\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  Private Keys:\n                </span>\n                {/* illeterate through private keys and display a history of the private keys */}\n                {/* check that the private keys are not null */}\n\n                {userPrivateKeys.length != null ? (\n                  userPrivateKeys.map(account => (\n                    <Card\n                      style={{\n                        marginTop: \"1rem\",\n                        marginBottom: \"1rem\",\n                        border: \"1px solid black\",\n                        padding: \"1rem\",\n                        borderRadius: \"5px\",\n                        color: \"#282c34\",\n                        backgroundColor: \"#282c34\",\n                        border: \"dark\",\n                        borderColor: \"#3EB489\",\n                      }}\n                    >\n                      <span\n                        style={{\n                          color: \"#3EB489\",\n                          fontWeight: \"bold\",\n                        }}\n                      >\n                        {\" \"}\n                        <h3>Chain:</h3>{\" \"}\n                        <img src={returnLogo(account.chain)} alt=\"Tea Party Logo\" width=\"25\" height=\"25\" />{\" \"}\n                        {account.chain}{\" \"}\n                      </span>\n                      <span\n                        style={{\n                          color: \"#3EB489\",\n                          fontWeight: \"bold\",\n                        }}\n                      >\n                        {\" \"}\n                        <h3>Address:</h3>\n                        <span\n                          style={{\n                            color: \"#3EB489\",\n                            fontWeight: \"bold\",\n                          }}\n                        >\n                          {account.address}{\" \"}\n                        </span>\n                      </span>\n                      <span\n                        style={{\n                          color: \"#3EB489\",\n                          fontWeight: \"bold\",\n                        }}\n                      >\n                        {\" \"}\n                        <h3>Private Key:</h3>{\" \"}\n                        <span\n                          style={{\n                            color: \"#282c34\",\n                            fontWeight: \"bold\",\n                          }}\n                        >\n                          {account.privateKey}\n                        </span>\n                        <Button\n                          style={{ backgroundColor: \"#023020\", color: \"#3EB489\", fontWeight: \"bold\" }}\n                          variant=\"secondary\"\n                          onClick={() => {\n                            navigator.clipboard.writeText(account.privateKey);\n                          }}\n                        >\n                          Copy\n                        </Button>\n                        <Button\n                          style={{ backgroundColor: \"#023020\", color: \"#3EB489\", fontWeight: \"bold\" }}\n                          variant=\"secondary\"\n                          onClick={e => {\n                            deletePK(account.address);\n                          }}\n                        >\n                          Delete\n                        </Button>\n                      </span>\n                    </Card>\n                  ))\n                ) : (\n                  <span> No Private Keys</span>\n                )}\n              </div>\n            </div>\n          </Card.Body>\n        ) : null}\n      </Card>\n    </div>\n  );\n}\n","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/TokenSelect.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/NetworkSwitch.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/MultiAddressInput.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/FaucetHint.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/NetworkDisplay.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/L2Bridge.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/TokenBalance.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/ThemeSwitch.jsx",["274","275","276","277"],"import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  return (\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\n\n    </div>\n  );\n}\n","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Swap.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Timeline.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Ramp.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Provider.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Header.jsx",["278","279","280"],"import React from \"react\";\nimport { Typography } from \"antd\";\n\nconst { Title, Text } = Typography;\n\n// displays a page header\n\nexport default function Header({ link, title, subTitle, ...props }) {\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"space-between\", padding: \"1.2rem\" }}>\n      {props.children}\n    </div>\n  );\n}\n\nHeader.defaultProps = {\n  link: \"https://github.com/scaffold-eth/scaffold-eth\",\n  title: \"🏗 Scaffold-Eth\",\n  subTitle: \"Forkable Ethereum dev stack focused on fast product iteration\",\n};\n","/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/GasGauge.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Faucet.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Events.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/BytesStringInput.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Contract/index.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Contract/FunctionForm.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Contract/DisplayVariable.jsx",[],"/home/jeff/go/src/github.com/TeaPartyCrypto/Tea/packages/react-app/src/components/Contract/utils.jsx",[],{"ruleId":"281","severity":1,"message":"282","line":1,"column":10,"nodeType":"283","messageId":"284","endLine":1,"endColumn":16},{"ruleId":"281","severity":1,"message":"285","line":1,"column":23,"nodeType":"283","messageId":"284","endLine":1,"endColumn":27},{"ruleId":"281","severity":1,"message":"286","line":14,"column":10,"nodeType":"283","messageId":"284","endLine":14,"endColumn":14},{"ruleId":"281","severity":1,"message":"287","line":20,"column":3,"nodeType":"283","messageId":"284","endLine":20,"endColumn":11},{"ruleId":"281","severity":1,"message":"288","line":22,"column":3,"nodeType":"283","messageId":"284","endLine":22,"endColumn":7},{"ruleId":"281","severity":1,"message":"289","line":24,"column":3,"nodeType":"283","messageId":"284","endLine":24,"endColumn":17},{"ruleId":"281","severity":1,"message":"290","line":25,"column":3,"nodeType":"283","messageId":"284","endLine":25,"endColumn":13},{"ruleId":"281","severity":1,"message":"291","line":26,"column":3,"nodeType":"283","messageId":"284","endLine":26,"endColumn":16},{"ruleId":"281","severity":1,"message":"292","line":33,"column":10,"nodeType":"283","messageId":"284","endLine":33,"endColumn":14},{"ruleId":"281","severity":1,"message":"293","line":33,"column":16,"nodeType":"283","messageId":"284","endLine":33,"endColumn":25},{"ruleId":"281","severity":1,"message":"294","line":33,"column":27,"nodeType":"283","messageId":"284","endLine":33,"endColumn":32},{"ruleId":"281","severity":1,"message":"295","line":33,"column":34,"nodeType":"283","messageId":"284","endLine":33,"endColumn":42},{"ruleId":"281","severity":1,"message":"296","line":61,"column":7,"nodeType":"283","messageId":"284","endLine":61,"endColumn":19},{"ruleId":"281","severity":1,"message":"297","line":63,"column":7,"nodeType":"283","messageId":"284","endLine":63,"endColumn":27},{"ruleId":"281","severity":1,"message":"298","line":81,"column":27,"nodeType":"283","messageId":"284","endLine":81,"endColumn":45},{"ruleId":"281","severity":1,"message":"299","line":82,"column":9,"nodeType":"283","messageId":"284","endLine":82,"endColumn":17},{"ruleId":"281","severity":1,"message":"300","line":1,"column":18,"nodeType":"283","messageId":"284","endLine":1,"endColumn":22},{"ruleId":"281","severity":1,"message":"301","line":1,"column":24,"nodeType":"283","messageId":"284","endLine":1,"endColumn":34},{"ruleId":"281","severity":1,"message":"302","line":1,"column":36,"nodeType":"283","messageId":"284","endLine":1,"endColumn":43},{"ruleId":"281","severity":1,"message":"303","line":1,"column":45,"nodeType":"283","messageId":"284","endLine":1,"endColumn":50},{"ruleId":"281","severity":1,"message":"304","line":1,"column":52,"nodeType":"283","messageId":"284","endLine":1,"endColumn":60},{"ruleId":"281","severity":1,"message":"305","line":1,"column":62,"nodeType":"283","messageId":"284","endLine":1,"endColumn":68},{"ruleId":"281","severity":1,"message":"306","line":1,"column":70,"nodeType":"283","messageId":"284","endLine":1,"endColumn":74},{"ruleId":"281","severity":1,"message":"307","line":1,"column":76,"nodeType":"283","messageId":"284","endLine":1,"endColumn":82},{"ruleId":"281","severity":1,"message":"308","line":3,"column":10,"nodeType":"283","messageId":"284","endLine":3,"endColumn":15},{"ruleId":"281","severity":1,"message":"309","line":4,"column":10,"nodeType":"283","messageId":"284","endLine":4,"endColumn":22},{"ruleId":"281","severity":1,"message":"310","line":5,"column":10,"nodeType":"283","messageId":"284","endLine":5,"endColumn":18},{"ruleId":"281","severity":1,"message":"311","line":8,"column":10,"nodeType":"283","messageId":"284","endLine":8,"endColumn":17},{"ruleId":"281","severity":1,"message":"312","line":8,"column":19,"nodeType":"283","messageId":"284","endLine":8,"endColumn":26},{"ruleId":"281","severity":1,"message":"313","line":8,"column":28,"nodeType":"283","messageId":"284","endLine":8,"endColumn":34},{"ruleId":"281","severity":1,"message":"314","line":21,"column":10,"nodeType":"283","messageId":"284","endLine":21,"endColumn":18},{"ruleId":"281","severity":1,"message":"315","line":21,"column":20,"nodeType":"283","messageId":"284","endLine":21,"endColumn":31},{"ruleId":"281","severity":1,"message":"316","line":3,"column":61,"nodeType":"283","messageId":"284","endLine":3,"endColumn":66},{"ruleId":"281","severity":1,"message":"317","line":3,"column":68,"nodeType":"283","messageId":"284","endLine":3,"endColumn":82},{"ruleId":"281","severity":1,"message":"318","line":46,"column":10,"nodeType":"283","messageId":"284","endLine":46,"endColumn":14},{"ruleId":"281","severity":1,"message":"319","line":46,"column":16,"nodeType":"283","messageId":"284","endLine":46,"endColumn":23},{"ruleId":"281","severity":1,"message":"320","line":49,"column":10,"nodeType":"283","messageId":"284","endLine":49,"endColumn":37},{"ruleId":"281","severity":1,"message":"321","line":49,"column":39,"nodeType":"283","messageId":"284","endLine":49,"endColumn":69},{"ruleId":"281","severity":1,"message":"322","line":50,"column":10,"nodeType":"283","messageId":"284","endLine":50,"endColumn":36},{"ruleId":"281","severity":1,"message":"323","line":50,"column":38,"nodeType":"283","messageId":"284","endLine":50,"endColumn":67},{"ruleId":"281","severity":1,"message":"324","line":59,"column":10,"nodeType":"283","messageId":"284","endLine":59,"endColumn":19},{"ruleId":"281","severity":1,"message":"325","line":59,"column":21,"nodeType":"283","messageId":"284","endLine":59,"endColumn":33},{"ruleId":"281","severity":1,"message":"326","line":64,"column":10,"nodeType":"283","messageId":"284","endLine":64,"endColumn":26},{"ruleId":"281","severity":1,"message":"327","line":64,"column":28,"nodeType":"283","messageId":"284","endLine":64,"endColumn":47},{"ruleId":"281","severity":1,"message":"328","line":66,"column":10,"nodeType":"283","messageId":"284","endLine":66,"endColumn":16},{"ruleId":"281","severity":1,"message":"329","line":78,"column":10,"nodeType":"283","messageId":"284","endLine":78,"endColumn":16},{"ruleId":"330","severity":1,"message":"331","line":161,"column":32,"nodeType":"332","messageId":"333","endLine":161,"endColumn":34},{"ruleId":"334","severity":1,"message":"335","line":225,"column":6,"nodeType":"336","endLine":225,"endColumn":26,"suggestions":"337"},{"ruleId":"330","severity":1,"message":"331","line":250,"column":29,"nodeType":"332","messageId":"333","endLine":250,"endColumn":31},{"ruleId":"281","severity":1,"message":"338","line":262,"column":9,"nodeType":"283","messageId":"284","endLine":262,"endColumn":21},{"ruleId":"339","severity":1,"message":"340","line":345,"column":7,"nodeType":null,"messageId":"341","endLine":345,"endColumn":7,"fix":"342"},{"ruleId":"343","severity":1,"message":"344","line":345,"column":8,"nodeType":"332","messageId":"345","endLine":345,"endColumn":23},{"ruleId":"330","severity":1,"message":"331","line":345,"column":17,"nodeType":"332","messageId":"333","endLine":345,"endColumn":19},{"ruleId":"346","severity":1,"message":"347","line":449,"column":5,"nodeType":"348","messageId":"349","endLine":497,"endColumn":6},{"ruleId":"350","severity":1,"message":"351","line":495,"column":7,"nodeType":"352","messageId":"353","endLine":496,"endColumn":30},{"ruleId":"330","severity":1,"message":"331","line":959,"column":93,"nodeType":"332","messageId":"333","endLine":959,"endColumn":95},{"ruleId":"339","severity":1,"message":"354","line":986,"column":40,"nodeType":null,"messageId":"355","endLine":986,"endColumn":41,"fix":"356"},{"ruleId":"339","severity":1,"message":"354","line":997,"column":1,"nodeType":null,"messageId":"355","endLine":997,"endColumn":2,"fix":"357"},{"ruleId":"358","severity":1,"message":"359","line":1015,"column":41,"nodeType":"360","messageId":"333","endLine":1015,"endColumn":46},{"ruleId":"358","severity":1,"message":"361","line":1045,"column":31,"nodeType":"360","messageId":"333","endLine":1045,"endColumn":46},{"ruleId":"339","severity":1,"message":"362","line":1400,"column":37,"nodeType":null,"messageId":"363","endLine":1400,"endColumn":40,"fix":"364"},{"ruleId":"339","severity":1,"message":"362","line":1435,"column":37,"nodeType":null,"messageId":"363","endLine":1435,"endColumn":40,"fix":"365"},{"ruleId":"358","severity":1,"message":"366","line":1821,"column":25,"nodeType":"360","messageId":"333","endLine":1821,"endColumn":31},{"ruleId":"281","severity":1,"message":"307","line":1,"column":10,"nodeType":"283","messageId":"284","endLine":1,"endColumn":16},{"ruleId":"281","severity":1,"message":"367","line":7,"column":10,"nodeType":"283","messageId":"284","endLine":7,"endColumn":20},{"ruleId":"281","severity":1,"message":"368","line":14,"column":9,"nodeType":"283","messageId":"284","endLine":14,"endColumn":20},{"ruleId":"339","severity":1,"message":"369","line":19,"column":10,"nodeType":null,"messageId":"363","endLine":23,"endColumn":4,"fix":"370"},{"ruleId":"281","severity":1,"message":"371","line":4,"column":9,"nodeType":"283","messageId":"284","endLine":4,"endColumn":14},{"ruleId":"281","severity":1,"message":"372","line":4,"column":16,"nodeType":"283","messageId":"284","endLine":4,"endColumn":20},{"ruleId":"339","severity":1,"message":"373","line":9,"column":10,"nodeType":null,"messageId":"363","endLine":13,"endColumn":4,"fix":"374"},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Menu' is defined but never used.","'Link' is defined but never used.","'GasGauge' is defined but never used.","'Ramp' is defined but never used.","'NetworkDisplay' is defined but never used.","'FaucetHint' is defined but never used.","'NetworkSwitch' is defined but never used.","'Home' is defined but never used.","'ExampleUI' is defined but never used.","'Hints' is defined but never used.","'Subgraph' is defined but never used.","'NETWORKCHECK' is assigned a value but never used.","'USE_NETWORK_SELECTOR' is assigned a value but never used.","'setSelectedNetwork' is assigned a value but never used.","'location' is assigned a value but never used.","'Card' is defined but never used.","'DatePicker' is defined but never used.","'Divider' is defined but never used.","'Input' is defined but never used.","'Progress' is defined but never used.","'Slider' is defined but never used.","'Spin' is defined but never used.","'Switch' is defined but never used.","'utils' is defined but never used.","'SyncOutlined' is defined but never used.","'TeaParty' is defined but never used.","'Address' is defined but never used.","'Balance' is defined but never used.","'Events' is defined but never used.","'response' is assigned a value but never used.","'setResponse' is assigned a value but never used.","'Toast' is defined but never used.","'ToastContainer' is defined but never used.","'txid' is assigned a value but never used.","'setTxid' is assigned a value but never used.","'sellersPaymentTransactionID' is assigned a value but never used.","'setSellersPaymentTransactionID' is assigned a value but never used.","'buyersPaymentTransactionID' is assigned a value but never used.","'setBuyersPaymentTransactionID' is assigned a value but never used.","'tradeInfo' is assigned a value but never used.","'setTradeInfo' is assigned a value but never used.","'buyOrderResponse' is assigned a value but never used.","'setBuyOrderResponse' is assigned a value but never used.","'isOpen' is assigned a value but never used.","'events' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'pendingPayNumberAmmount' and 'userPrivateKeys.length'. Either include them or remove the dependency array. You can also do a functional update 'setPendingPayNumberAmmount(p => ...)' if you only need 'pendingPayNumberAmmount' in the 'setPendingPayNumberAmmount' call.","ArrayExpression",["375"],"'assistedSell' is assigned a value but never used.","prettier/prettier","Insert `·`","insert",{"range":"376","text":"377"},"use-isnan","Use the isNaN function to compare with NaN.","comparisonWithNaN","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","Delete `·`","delete",{"range":"378","text":"379"},{"range":"380","text":"379"},"no-dupe-keys","Duplicate key 'color'.","ObjectExpression","Duplicate key 'backgroundColor'.","Replace `(e)` with `e`","replace",{"range":"381","text":"382"},{"range":"383","text":"382"},"Duplicate key 'border'.","'isDarkMode' is assigned a value but never used.","'toggleTheme' is assigned a value but never used.","Replace `(⏎····<div·className=\"main·fade-in\"·style={{·position:·\"fixed\",·right:·8,·bottom:·8·}}>⏎⏎····</div>⏎··)` with `<div·className=\"main·fade-in\"·style={{·position:·\"fixed\",·right:·8,·bottom:·8·}}></div>`",{"range":"384","text":"385"},"'Title' is assigned a value but never used.","'Text' is assigned a value but never used.","Replace `(⏎····<div·style={{·display:·\"flex\",·justifyContent:·\"space-between\",·padding:·\"1.2rem\"·}}>⏎······{props.children}⏎····</div>⏎··)` with `<div·style={{·display:·\"flex\",·justifyContent:·\"space-between\",·padding:·\"1.2rem\"·}}>{props.children}</div>`",{"range":"386","text":"387"},{"desc":"388","fix":"389"},[11030,11030]," ",[35150,35151],"",[35740,35741],[58805,58808],"e",[60171,60174],[633,736],"<div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}></div>",[206,335],"<div style={{ display: \"flex\", justifyContent: \"space-between\", padding: \"1.2rem\" }}>{props.children}</div>","Update the dependencies array to be: [pendingPayNumberAmmount, userPrivateKeys.length, waitingToReconnect]",{"range":"390","text":"391"},[7665,7685],"[pendingPayNumberAmmount, userPrivateKeys.length, waitingToReconnect]"]